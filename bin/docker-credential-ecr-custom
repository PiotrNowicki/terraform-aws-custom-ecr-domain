#!/bin/sh

set -eo pipefail

###############
#   HELPERS   #
###############

getEcrLoginPath() {
	command -v docker-credential-ecr-login \
	|| echo >&2 'docker-credential-ecr-login is not installed'
}

getJqPath() {
	command -v jq \
	|| echo >&2 'jq is not installed'
}

getRegistry() {
	local customName="$(cat /dev/stdin)"
	getServerURLs | "$JQ" -r ".\"$customName\""
}

getServerURLs() {
	if [ -f "$ECR_CONFIG" ]
	then
		cat "$ECR_CONFIG"
	else
		echo >&2 "no ecr-custom config found at $ECR_CONFIG"
		echo '{}'
	fi
}

showUsage() {
	echo >&2 "Usage: $BASENAME <store|get|erase|list|version>"
	return 1
}

showUnknownAction() {
	echo >&2 "Unknown credential action \`$1\`"
}

######################
#   CUSTOM ACTIONS   #
######################

get() {
	getRegistry | "$ECR_LOGIN" get
}

list() {
	getServerURLs | "$JQ" 'with_entries({key: ("https://"+.key), value: "AWS"})'
}

version() {
	echo "$VERSION"
}

############
#   MAIN   #
############

VERSION='0.2.0'
BASENAME="$(basename $0)"
ECR_CONFIG="${AWS_ECR_CUSTOM_CONFIG:-$HOME/.ecr/custom.json}"
ECR_DEFAULT="$AWS_ECR_CUSTOM_DEFAULT"

ECR_LOGIN="$(getEcrLoginPath)"
JQ="$(getJqPath)"

main() {
	test -n "$ECR_LOGIN" || return 1
	test -n "$JQ" || return 1
	case "$1" in
		'') showUsage ;;
		get|list|version) "$@" ;;
		store|erase) ;;
		*) showUnknownAction "$1" ;;
	esac
}

main "$@"
